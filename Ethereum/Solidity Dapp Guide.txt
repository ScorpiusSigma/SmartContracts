// Resources
	https://www.linkedin.com/pulse/nft-minting-smart-contract-explained-line-matthew-willox/

// Smart Contract
	Local tooling setup
		mkdir [folder name]
		cd [folder name]
		npm init -y
		npm install --save-dev hardhat

	Get sample project Working 
		npx hardhat
		npm install --save-dev @nomiclabs/hardhat-waffle ethereum-waffle chai @nomiclabs/hardhat-ethers ethers
		npm install @openzeppelin/contracts

	test run:
		npx hardhat run scripts/run.js
		
	actual run: 
		npx hardhat run scripts/deploy.js --network rinkeby

	[file]contracts/[name].sol:
		// SPDX-License-Identifier: MIT
		pragma solidity ^0.8.10;
		
		// NFT contract to inherit from.
		import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
		
		// Helper that allows debugging.
		import "hardhat/console.sol";

		// Helper functions OpenZeppelin provides.
		import "@openzeppelin/contracts/utils/Counters.sol";
		import "@openzeppelin/contracts/utils/Strings.sol";
		
		// Our contract inherits from ERC721, which is the standard NFT contract!
		contract [Name] is ERC721URIStorage { // A smart contract is like a class | is means inheritance
			
			// Creates a counter to keep track to tokenId
			using Counters for Counters.Counter;
			Counters.Counter private _tokenIds;
			
			constructor(params...)
			ERC721("NAME", "SYMBOL") { //Name and Symbol for the token, ex. ethereum and ETH | instantiating inherited contract
				// ...
			}
			
			function mint(){
				_safeMint(msg.sender, tokenId); // Assigns tokenId to the caller's wallet address, inherited from ERC721
				
			}
			
			function name() public view {}
		}

	[file]hardhat.config.js:
		module.exports = {
		  solidity: "0.8.10", //change solidity: "0.8.4", to solidity: "0.8.0" 
		  networks: {
			rinkeby: {
			  url: 'YOUR ALCHEMY_API_URL',
			  accounts: ['YOUR_PRIVATE_RINKEBY_ACCOUNT_KEY_FROM_METAMASK'],
			},
		  },
		};


	[file]script/run.js: // Deploys contract to local blockchain
		const hre = require("hardhat");

		const [name]ContractFactory = await hre.ethers.getContractFactory("[name]"); // Compiles contract and generate necessary file under artifacts.
		const [name]Contract = await [name]ContractFactory.deploy(); // Hardhat creates a local Ethereum network (its like instantiating an object)
		await [name]Contract.deployed(); // Waits until contract is officially mined and depolyed to local blockchain and you can parse args to its constructor
		console.log("Contract deployed to:", [name]Contract.address);
		
		let returnedTokenUri = await gameContract.tokenURI(1); // Inherited from ERC271
		
	[file]script/deploy.js: // Deploys contract to actual blockchain
		// Exactly the same as run.js...
		// To prevent confusion between test and actual

//Frontend
	[NOTES]
		Things needed to call contract from web app:
			1) ABI file
			2) Deplyed contract address
		When there are changes to the contract, always:
			1) deploy it again
			2) Update the contract address on the frontend
			3) Update the ABI file to the frontend
			
	[Check for ethereum wallet]
		const { ethereum } = window;
		
	[Check for wallets with authorised access]
		const accounts = await ethereum.request({method: 'eth_accounts'});
		
	[request for wallet connections]
		const accounts = await ethereum.request({method:s 'eth_requestAccounts'});
	
	[Create a file] constants.js
		export const CONTRACT_ADDRESS = 'YOUR_CONTRACT_ADDRESS_GOES_HERE';
		
	[Getting ABI from smart_contract]
		// Deply smart contract first
		artifacts/contracts/[name].sol/[name].json
	
	[Adding ABI to Frontend]
		// Add ABI, [name].json, into utils/contracts
	
	[Checking of Network]
		window.ethereum.networkVersion // gives the network that the wallet is at.
	
	[Talk to Ethereum nodes] // To send and receive data
		const provider = new ethers.providers.Web3Provider(window.ethereum);
		const signer = provider.getSigner();
	
	[Create connection to contract]
		const contract = new ethers.Contract(
		  CONTRACT_ADDRESS,
		  [name].abi,
		  signer
		);
		
		// Invocation of function
		const txn = await contract.checkIfUserHasNFT();

	[Listent to contract for event]
		contract.on([Event Name], [Function to execute when event is caught])


	
	
// Errors and Solution
	[HH700]
		Try the following step:
			1) npx hardhat compile
			2) npm install glob@7.2.0
			
// IPFS
	1) Upload image and a CID will be generated
	2) CID is the file content address on IPFS
	3) https://cloudflare-ipfs.com/ipfs/[INSERT_YOUR_CID_HERE]
		// This starts an IPFS node the local machine and retrieve the file
	4) for brave browser:
		ipfs://[INSERT_YOUR_CID_HERE]
	
